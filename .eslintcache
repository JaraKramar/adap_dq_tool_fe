[{"/Users/jk/prog/DS/adap_dq_tool_fe/src/App.tsx":"1","/Users/jk/prog/DS/adap_dq_tool_fe/src/components/Table.tsx":"2","/Users/jk/prog/DS/adap_dq_tool_fe/src/components/DataComponent.tsx":"3"},{"size":512,"mtime":1607949412749,"results":"4","hashOfConfig":"5"},{"size":7730,"mtime":1607949689835,"results":"6","hashOfConfig":"5"},{"size":1989,"mtime":1607903921349,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"tnzwva",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jk/prog/DS/adap_dq_tool_fe/src/App.tsx",["15","16"],"/Users/jk/prog/DS/adap_dq_tool_fe/src/components/Table.tsx",["17","18","19"],"import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Collapse from \"@material-ui/core/Collapse\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\n\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\n\nconst useRowStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      borderBottom: \"unset\",\n    },\n  },\n});\n\ninterface ValidationRun {\n  expectation_suite_name: string;\n  run_name: string;\n  run_time: string;\n  batch_identifier: string;\n  value: string;\n}\n\n// const test : Pick<RowData, 'result'>['result'] = {\n//   name:'sd', str: 'dsa'\n// }\n\ninterface RowData {\n  // 'meta' 'validation_time'\n  meta: string;\n  // \"results\": [{\"exception_info\": {\"exception_message\": null,\n  //            \"expectation_config\": {\"expectation_type\": \"expect_table_row_count_to_be_between\", //--nazev\n  expectation_type: string;\n  //            \"kwargs\": {\"min_value\": 1000, // -- zobrazit cele 2-3 radky -- radeji popup -- copy button\n  kwargs: string;\n  //            \"meta\": {\"SEVERITY\":\"A dalsi data\"}}, ///--- zatim dat jako warning\n  //            \"success\": true}, // --- podle meta severity viz vis\n  success: boolean;\n  //            \"partial_unexpected_list\": [], //--- zatim na klik rozbalit i zabalit\n  //            \"result\": {\"element_count\": 332685, //--- jen u spadlych kontrol rozbalovaci -- copy button\n  result: Array<TemplateStringsArray>;\n  // statistics: object\n}\n\nfunction GetValidations() {\n  /* const { isLoading, error, data } = useQuery(\"repoData\", () =>\n    fetch(\"https://adapdqweb.azurewebsites.net/validations/last\").then((res) =>\n      res.json()\n    )\n  );\n\n  if (isLoading) return \"Loading...\";\n\n  if (error) return \"An error has occurred: \";\n */\n  const data = axios('https://adapdqweb.azurewebsites.net/validations/last');\n  return data;\n}\n\nfunction Row(props: { row: RowData }) {\n  const { row } = props;\n  const [open, setOpen] = React.useState(false);\n  const classes = useRowStyles();\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.root}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.expectation_type}\n        </TableCell>\n        <TableCell align=\"right\">{row.kwargs}</TableCell>\n        <TableCell align=\"right\">{row.success ? \"success\" : \"failed\"}</TableCell>\n        <TableCell align=\"right\">{row.meta}</TableCell>\n        <TableCell align=\"right\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              alert(\"Comming soon\");\n            }}\n          >\n            Mute\n          </Button>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Result\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {/* {row.result.map((resultRow: any) => (\n                    <TableRow key={resultRow}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {resultRow}\n                      </TableCell>\n                      <TableCell align=\"right\"></TableCell>\n                    </TableRow>\n                  ))} */}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\nexport default function CollapsibleTable() {\n  const [validations, setValidations] = useState<ValidationRun[]>([]);\n  const [isLoading, setLoading] = useState(false)\n  const [isError, setError] = useState(false)\n  const [data, setData] = useState({});\n\n  function TimestampToTime(timestamp: string): Date {\n    console.log(\"timestamp\", timestamp);\n    const selectedPlacement = \"$1-$2-$3T$4:$5:$6\";\n    const convertedTimestamp = timestamp.replace(\n      /^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})(\\.\\d{6}Z)$/,\n      selectedPlacement\n    );\n    return new Date(convertedTimestamp);\n  }\n  \n  function ValidationRunFromResponse(resp: ValidationRun): RowData[] {\n    // 'meta' 'validation_time'\n    const metaTimestamp = TimestampToTime(resp.run_time).toString();\n    const value = JSON.parse(resp.value);\n    let rows: RowData[] = [];\n\n    console.log(\"---RESULT\", value[\"results\"][0][\"partial_unexpected_count\"]);\n    rows = value[\"results\"].map((expectation: any) => ({\n      meta: metaTimestamp,\n      expectation_type: expectation[\"expectation_config\"][\"expectation_type\"],\n      kwargs: expectation[\"kwargs\"],\n      success: expectation[\"success\"],\n      result: expectation[\"partial_unexpected_count\"],\n    }));\n    return rows;\n  }\n \n  useEffect(() => {\n    const fetchData = async () => {\n      setError(false);\n      setLoading(true);\n  \n      try {\n        const response = await axios('https://adapdqweb.azurewebsites.net/validations/last');\n        setValidations(response.data);\n        setData(response.data);\n      } catch (error) {\n        setError(true);\n      }\n      setLoading(false);\n    };\n    fetchData()\n  }, []);\n\n\n /*  let validation = GetValidations();\n  console.log(\"Validation value ------\", validation[0])\n  let parsedValidation = ValidationRunFromResponse(validation[0]);\n  console.log(\"Validation value ------\", validation)\n  let rows: RowData[] = parsedValidation; */\n\n  return (\n    <div>\n        <h1>Validations List</h1>\n        {isError && <div> Error occured </div>}\n        {isLoading ? (\n          <div>Loading ...</div>\n        ) : (\n          <ul>\n      {validations.map((validation) => (\n      <TableContainer component={Paper}>\n       <Table aria-label=\"collapsible table\">\n        <TableHead>\n          <TableRow>\n            <TableCell />\n            <TableCell>expectation_type</TableCell>\n            <TableCell align=\"left\">kwargs</TableCell>\n            <TableCell align=\"right\">success</TableCell>\n            <TableCell align=\"right\">meta</TableCell>\n            <TableCell align=\"right\">result</TableCell>\n            <TableCell align=\"right\">Mute</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {console.log(\"VALIDATION====\", validation)}\n          {ValidationRunFromResponse(validation).map((row) => (\n            <Row key={row.expectation_type} row={row} />\n          ))}\n        </TableBody>\n       </Table>\n      </TableContainer>\n      ))}\n      </ul>\n        )}\n    </div>\n  );\n}\n","/Users/jk/prog/DS/adap_dq_tool_fe/src/components/DataComponent.tsx",[],{"ruleId":"20","severity":1,"message":"21","line":5,"column":10,"nodeType":"22","messageId":"23","endLine":5,"endColumn":28},{"ruleId":"20","severity":1,"message":"24","line":10,"column":7,"nodeType":"22","messageId":"23","endLine":10,"endColumn":17},{"ruleId":"20","severity":1,"message":"25","line":19,"column":10,"nodeType":"22","messageId":"23","endLine":19,"endColumn":18},{"ruleId":"20","severity":1,"message":"26","line":59,"column":10,"nodeType":"22","messageId":"23","endLine":59,"endColumn":24},{"ruleId":"20","severity":1,"message":"27","line":146,"column":10,"nodeType":"22","messageId":"23","endLine":146,"endColumn":14},"@typescript-eslint/no-unused-vars","'ReactQueryDevtools' is defined but never used.","Identifier","unusedVar","'queryCache' is assigned a value but never used.","'useQuery' is defined but never used.","'GetValidations' is defined but never used.","'data' is assigned a value but never used."]